generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  user_id          String             @id @default(uuid())
  username         String             @unique
  email            String             @unique
  password         String
  role             role               @default(user)
  created_at       DateTime           @default(now()) @db.Timestamp(0)
  updated_at       DateTime           @default(dbgenerated("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP")) @db.Timestamp(0)
  user_profiles    user_profiles[]
  articles         articles[]
  article_comments article_comments[]
}

enum role {
  user
  admin
}

model user_profiles {
  user_profile_id String   @id @default(uuid())
  user_id         String
  first_name      String
  last_name       String
  created_at      DateTime @default(now()) @db.Timestamp(0)
  updated_at      DateTime @default(dbgenerated("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP")) @db.Timestamp(0)
  user            users    @relation(fields: [user_id], references: [user_id])
}

model articles {
  article_id          String             @id @default(uuid())
  article_category_id String
  user_id             String
  title               String
  content             String
  image_path          String
  published_at        DateTime
  created_at          DateTime           @default(now()) @db.Timestamp(0)
  updated_at          DateTime           @default(dbgenerated("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP")) @db.Timestamp(0)
  user                users              @relation(fields: [user_id], references: [user_id])
  article_category    article_categories @relation(fields: [article_category_id], references: [article_category_id])
  article_comments    article_comments[]
}

model article_categories {
  article_category_id String     @id @default(uuid())
  name                String
  description         String
  created_at          DateTime   @default(now()) @db.Timestamp(0)
  updated_at          DateTime   @default(dbgenerated("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP")) @db.Timestamp(0)
  articles            articles[]
}

model article_comments {
  article_comment_id String   @id @default(uuid())
  article_id         String
  user_id            String
  content            String
  created_at         DateTime @default(now()) @db.Timestamp(0)
  updated_at         DateTime @default(dbgenerated("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP")) @db.Timestamp(0)
  user               users    @relation(fields: [user_id], references: [user_id])
  article            articles @relation(fields: [article_id], references: [article_id])
}
